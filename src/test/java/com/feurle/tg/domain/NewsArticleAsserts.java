package com.feurle.tg.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NewsArticleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNewsArticleAllPropertiesEquals(NewsArticle expected, NewsArticle actual) {
        assertNewsArticleAutoGeneratedPropertiesEquals(expected, actual);
        assertNewsArticleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNewsArticleAllUpdatablePropertiesEquals(NewsArticle expected, NewsArticle actual) {
        assertNewsArticleUpdatableFieldsEquals(expected, actual);
        assertNewsArticleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNewsArticleAutoGeneratedPropertiesEquals(NewsArticle expected, NewsArticle actual) {
        assertThat(actual)
            .as("Verify NewsArticle auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNewsArticleUpdatableFieldsEquals(NewsArticle expected, NewsArticle actual) {
        assertThat(actual)
            .as("Verify NewsArticle relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getContent()).as("check content").isEqualTo(expected.getContent()))
            .satisfies(a -> assertThat(a.getState()).as("check state").isEqualTo(expected.getState()))
            .satisfies(a -> assertThat(a.getPublishedDate()).as("check publishedDate").isEqualTo(expected.getPublishedDate()))
            .satisfies(a -> assertThat(a.getAuthor()).as("check author").isEqualTo(expected.getAuthor()))
            .satisfies(a -> assertThat(a.getLanguage()).as("check language").isEqualTo(expected.getLanguage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNewsArticleUpdatableRelationshipsEquals(NewsArticle expected, NewsArticle actual) {
        assertThat(actual)
            .as("Verify NewsArticle relationships")
            .satisfies(a -> assertThat(a.getArticleImage()).as("check articleImage").isEqualTo(expected.getArticleImage()));
    }
}
